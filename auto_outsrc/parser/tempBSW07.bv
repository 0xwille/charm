name := bsw07
setting := asymmetric

x := list{y, z, g}

BEGIN :: for
for{y := 1, Y} 
s_y := random(ZR))
Dj_y := p0 * (H(S_y, G2)^s_y))
Djp_y := g^s_y
END :: for

BEGIN :: types
policy_str := str
policy := object
attrs := list
sh := list
coeff := list
share := list
S := list
END :: types

BEGIN :: func:setup
input := None
output := list{mk, pk}
g := random(G1)
g2 := random(G2)
alpha := random(ZR)
beta := random(ZR)

h := g^beta
f := g^(1/beta)
i := g^alpha
egg := e(g, g2)^alpha

mk := list{beta, i}
pk := list{g, g2, h, f, egg}

return := list{mk, pk}
END :: func:setup


BEGIN :: func:keygen
input := list{pk, mk, S} 
output := sk

r := random(ZR)
p0 := pk#1^r
D := (mk#1 * p0)^(1/mk#0)
Dj := list{}
Djp := list{}

Y := len(S)

BEGIN :: for
for{y := 1, Y} 
s_y := random(ZR))
Dj_y := p0 * (H(S_y, G2)^s_y))
Djp_y := g^s_y
END :: for

sk := list{S, D, Dj, Djp}
return := sk
END :: func:keygen


BEGIN :: func:encrypt
input := list{pk, M, policy_str}
output := ct

policy := createPolicy(policy_str)
attrs := getAttributeList(policy)
s := random(ZR)
sh := calculateShares(s, policy)
Y := len(sh)
g1 := pk#0
h := pk#2
egg := pk#2

Ctl := M * egg^s
C    := h ^ s

BEGIN :: for
for{y := 1, Y}
share_y := sh#attrs#y
Cr_y := g1 ^ share_y
Cpr_y := (H(attrs_y, G2))^share_y
END :: for

ct := list{policy_str, Ctl, C, Cr, Cpr}
return := ct
END :: func:encrypt


BEGIN :: func:decrypt
input := list{pk, sk, ct}
output := M

S := sk#0
D := sk#1
Dj := sk#2
Djp := sk#3
policy_str := ct#0
Ctl := ct#1
C :=  ct#2
Cr := ct#3
Cpr := ct#4

policy := createPolicy(policy_str)
attrs  := prune(policy, S)
coeff := getCoefficients(policy)

Y := len(attrs)
A := init(1)
BEGIN :: for
for{y := 1, Y}
A := A * ((e(Cr_y, Dj_y) / e(Djp_y, Cpr_y))^coeff_y)
END :: for

result0 := e(C, D) / A
M := Ctl / result0

return := M
END :: func:decrypt

