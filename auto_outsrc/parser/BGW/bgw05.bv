name := bgw05
setting := symmetric

N := 2
secparam := 80

BEGIN :: types
n := int
giValues := list{G1}
sk := list{G1}
END :: types

BEGIN :: func:setup
input := list{nParam, dummyVar}
n := nParam
g := random(G1)
alpha := random(ZR)
endIndexOfList := (2 * n) + 1
BEGIN :: for
for{i := 1, endIndexOfList}
giValues#i := g ^ (alpha ^ i)
END :: for
gamma := random(ZR)
v := g ^ gamma
pk := list{g, n, giValues, v}
BEGIN :: for
for{i := 1, n+1}
sk#i := (giValues#i) ^ gamma
END :: for
output := list{pk, sk}
END :: func:setup

BEGIN :: func:encrypt
input := list{S, pk}
pk := expand{g, n, giValues, v}
t := random(ZR)
K := (e(giValues#n, giValues#1)) ^ t

dotProdEncrypt := init(G1)
BEGIN :: forall
forall{jEncrypt := S}
dotProdEncrypt := dotProdEncrypt * giValues#n+1-jEncrypt?
END :: forall

Hdr2 := (v * dotProdEncrypt) ^ t
Hdr1 := g ^ t
Hdr := list{Hdr1, Hdr2}
output := list{Hdr, K}
END :: func:encrypt

BEGIN :: func:decrypt
input := list{S, i, di, Hdr, pk}
Hdr := expand{C0, C1}
pk := expand{g, n, giValues, v}

numerator := e(giValues#i, C1)

dotProdDecrypt := init(G1)
BEGIN :: forall
forall{jDecrypt := S}
BEGIN :: if
if { jDecrypt != i }
dotProdDecrypt := dotProdDecrypt * giValues#n+1-j+i?
END :: if
END :: forall
denominator := e(di * dotProdDecrypt, C0)
KDecrypt := numerator / denominator
output := KDecrypt
END :: func:decrypt
