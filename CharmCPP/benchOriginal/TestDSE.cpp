#include "TestDSE.h"

void Dsewaters09::setup(CharmList & mpk, CharmList & msk)
{
    G1 gG1 = group.init(G1_t);
    G2 gG2 = group.init(G2_t);
    ZR w = group.init(ZR_t);
    G1 wG1 = group.init(G1_t);
    G2 wG2 = group.init(G2_t);
    ZR u = group.init(ZR_t);
    G1 uG1 = group.init(G1_t);
    G2 uG2 = group.init(G2_t);
    ZR h = group.init(ZR_t);
    G1 hG1 = group.init(G1_t);
    G2 hG2 = group.init(G2_t);
    ZR v = group.init(ZR_t);
    G1 vG1 = group.init(G1_t);
    G2 vG2 = group.init(G2_t);
    ZR v1 = group.init(ZR_t);
    G1 v1G1 = group.init(G1_t);
    G2 v1G2 = group.init(G2_t);
    ZR v2 = group.init(ZR_t);
    G1 v2G1 = group.init(G1_t);
    G2 v2G2 = group.init(G2_t);
    ZR a1 = group.init(ZR_t);
    ZR a2 = group.init(ZR_t);
    ZR b = group.init(ZR_t);
    ZR alpha = group.init(ZR_t);
    G1 gbG1 = group.init(G1_t);
    G2 gbG2 = group.init(G2_t);
    G2 ga1 = group.init(G2_t);
    G2 ga2 = group.init(G2_t);
    G2 gba1 = group.init(G2_t);
    G2 gba2 = group.init(G2_t);
    G2 tau1 = group.init(G2_t);
    G2 tau2 = group.init(G2_t);
    G2 tau1b = group.init(G2_t);
    G2 tau2b = group.init(G2_t);
    GT egga = group.init(GT_t);
    G1 galpha = group.init(G1_t);
    G1 galphaUSa1 = group.init(G1_t);
    gG1 = group.random(G1_t);
    gG2 = group.random(G2_t);
    w = group.random(ZR_t);
    wG1 = group.exp(gG1, w);
    wG2 = group.exp(gG2, w);
    u = group.random(ZR_t);
    uG1 = group.exp(gG1, u);
    uG2 = group.exp(gG2, u);
    h = group.random(ZR_t);
    hG1 = group.exp(gG1, h);
    hG2 = group.exp(gG2, h);
    v = group.random(ZR_t);
    vG1 = group.exp(gG1, v);
    vG2 = group.exp(gG2, v);
    v1 = group.random(ZR_t);
    v1G1 = group.exp(gG1, v1);
    v1G2 = group.exp(gG2, v1);
    v2 = group.random(ZR_t);
    v2G1 = group.exp(gG1, v2);
    v2G2 = group.exp(gG2, v2);
    a1 = group.random(ZR_t);
    a2 = group.random(ZR_t);
    b = group.random(ZR_t);
    alpha = group.random(ZR_t);
    gbG1 = group.exp(gG1, b);
    gbG2 = group.exp(gG2, b);
    ga1 = group.exp(gG2, a1);
    ga2 = group.exp(gG2, a2);
    gba1 = group.exp(gbG2, a1);
    gba2 = group.exp(gbG2, a2);
    tau1 = group.mul(vG2, group.exp(v1G2, a1));
    tau2 = group.mul(vG2, group.exp(v2G2, a2));
    tau1b = group.exp(tau1, b);
    tau2b = group.exp(tau2, b);
    egga = group.exp(group.pair(gG1, gG2), group.mul(alpha, group.mul(a1, b)));
    galpha = group.exp(gG1, alpha);
    galphaUSa1 = group.exp(galpha, a1);
    mpk.insert(0, gG1);
    mpk.insert(1, gG2);
    mpk.insert(2, gbG1);
    mpk.insert(3, gbG2);
    mpk.insert(4, ga1);
    mpk.insert(5, ga2);
    mpk.insert(6, gba1);
    mpk.insert(7, gba2);
    mpk.insert(8, tau1);
    mpk.insert(9, tau2);
    mpk.insert(10, tau1b);
    mpk.insert(11, tau2b);
    mpk.insert(12, wG1);
    mpk.insert(13, wG2);
    mpk.insert(14, uG1);
    mpk.insert(15, uG2);
    mpk.insert(16, hG1);
    mpk.insert(17, hG2);
    mpk.insert(18, egga);
    msk.insert(0, galpha);
    msk.insert(1, galphaUSa1);
    msk.insert(2, vG1);
    msk.insert(3, vG2);
    msk.insert(4, v1G1);
    msk.insert(5, v1G2);
    msk.insert(6, v2G1);
    msk.insert(7, v2G2);
    msk.insert(8, alpha);
    return;
}

void Dsewaters09::keygen(CharmList & mpk, CharmList & msk, string & id, CharmList & sk)
{
    G1 gG1;
    G2 gG2;
    G1 gbG1;
    G2 gbG2;
    G2 ga1;
    G2 ga2;
    G2 gba1;
    G2 gba2;
    G2 tau1;
    G2 tau2;
    G2 tau1b;
    G2 tau2b;
    G1 wG1;
    G2 wG2;
    G1 uG1;
    G2 uG2;
    G1 hG1;
    G2 hG2;
    GT egga;
    G1 galpha;
    G1 galphaUSa1;
    G1 vG1;
    G2 vG2;
    G1 v1G1;
    G2 v1G2;
    G1 v2G1;
    G2 v2G2;
    ZR alpha;
    ZR r1 = group.init(ZR_t);
    ZR r2 = group.init(ZR_t);
    ZR z1 = group.init(ZR_t);
    ZR z2 = group.init(ZR_t);
    ZR tagUSk = group.init(ZR_t);
    ZR r = group.init(ZR_t);
    ZR idUShash = group.init(ZR_t);
    G1 D1 = group.init(G1_t);
    G1 D2 = group.init(G1_t);
    G1 D3 = group.init(G1_t);
    G1 D4 = group.init(G1_t);
    G1 D5 = group.init(G1_t);
    G1 D6 = group.init(G1_t);
    G1 D7 = group.init(G1_t);
    G1 K = group.init(G1_t);
    
    gG1 = mpk[0].getG1();
    gG2 = mpk[1].getG2();
    gbG1 = mpk[2].getG1();
    gbG2 = mpk[3].getG2();
    ga1 = mpk[4].getG2();
    ga2 = mpk[5].getG2();
    gba1 = mpk[6].getG2();
    gba2 = mpk[7].getG2();
    tau1 = mpk[8].getG2();
    tau2 = mpk[9].getG2();
    tau1b = mpk[10].getG2();
    tau2b = mpk[11].getG2();
    wG1 = mpk[12].getG1();
    wG2 = mpk[13].getG2();
    uG1 = mpk[14].getG1();
    uG2 = mpk[15].getG2();
    hG1 = mpk[16].getG1();
    hG2 = mpk[17].getG2();
    egga = mpk[18].getGT();
    
    galpha = msk[0].getG1();
    galphaUSa1 = msk[1].getG1();
    vG1 = msk[2].getG1();
    vG2 = msk[3].getG2();
    v1G1 = msk[4].getG1();
    v1G2 = msk[5].getG2();
    v2G1 = msk[6].getG1();
    v2G2 = msk[7].getG2();
    alpha = msk[8].getZR();
    r1 = group.random(ZR_t);
    r2 = group.random(ZR_t);
    z1 = group.random(ZR_t);
    z2 = group.random(ZR_t);
    tagUSk = group.random(ZR_t);
    r = group.add(r1, r2);
    idUShash = group.hashListToZR(id);
    D1 = group.mul(galphaUSa1, group.exp(vG1, r));
    D2 = group.mul(group.mul(group.exp(gG1, group.neg(alpha)), group.exp(v1G1, r)), group.exp(gG1, z1));
    D3 = group.exp(gbG1, group.neg(z1));
    D4 = group.mul(group.exp(v2G1, r), group.exp(gG1, z2));
    D5 = group.exp(gbG1, group.neg(z2));
    D6 = group.exp(gbG1, r2);
    D7 = group.exp(gG1, r1);
    K = group.exp(group.mul(group.mul(group.exp(uG1, idUShash), group.exp(wG1, tagUSk)), hG1), r1);
    sk.insert(0, id);
    sk.insert(1, D1);
    sk.insert(2, D2);
    sk.insert(3, D3);
    sk.insert(4, D4);
    sk.insert(5, D5);
    sk.insert(6, D6);
    sk.insert(7, D7);
    sk.insert(8, K);
    sk.insert(9, tagUSk);
    return;
}

void Dsewaters09::encrypt(CharmList & mpk, GT & M, string & id, CharmList & ct)
{
    G1 gG1;
    G2 gG2;
    G1 gbG1;
    G2 gbG2;
    G2 ga1;
    G2 ga2;
    G2 gba1;
    G2 gba2;
    G2 tau1;
    G2 tau2;
    G2 tau1b;
    G2 tau2b;
    G1 wG1;
    G2 wG2;
    G1 uG1;
    G2 uG2;
    G1 hG1;
    G2 hG2;
    GT egga;
    ZR s1 = group.init(ZR_t);
    ZR s2 = group.init(ZR_t);
    ZR t = group.init(ZR_t);
    ZR tagUSc = group.init(ZR_t);
    ZR s = group.init(ZR_t);
    ZR idUShash2 = group.init(ZR_t);
    GT C0 = group.init(GT_t);
    G2 C1 = group.init(G2_t);
    G2 C2 = group.init(G2_t);
    G2 C3 = group.init(G2_t);
    G2 C4 = group.init(G2_t);
    G2 C5 = group.init(G2_t);
    G2 C6 = group.init(G2_t);
    G2 C7 = group.init(G2_t);
    G2 E1 = group.init(G2_t);
    G2 E2 = group.init(G2_t);
    
    gG1 = mpk[0].getG1();
    gG2 = mpk[1].getG2();
    gbG1 = mpk[2].getG1();
    gbG2 = mpk[3].getG2();
    ga1 = mpk[4].getG2();
    ga2 = mpk[5].getG2();
    gba1 = mpk[6].getG2();
    gba2 = mpk[7].getG2();
    tau1 = mpk[8].getG2();
    tau2 = mpk[9].getG2();
    tau1b = mpk[10].getG2();
    tau2b = mpk[11].getG2();
    wG1 = mpk[12].getG1();
    wG2 = mpk[13].getG2();
    uG1 = mpk[14].getG1();
    uG2 = mpk[15].getG2();
    hG1 = mpk[16].getG1();
    hG2 = mpk[17].getG2();
    egga = mpk[18].getGT();
    s1 = group.random(ZR_t);
    s2 = group.random(ZR_t);
    t = group.random(ZR_t);
    tagUSc = group.random(ZR_t);
    s = group.add(s1, s2);
    idUShash2 = group.hashListToZR(id);
    C0 = group.mul(M, group.exp(egga, s2));
    C1 = group.exp(gbG2, s);
    C2 = group.exp(gba1, s1);
    C3 = group.exp(ga1, s1);
    C4 = group.exp(gba2, s2);
    C5 = group.exp(ga2, s2);
    C6 = group.mul(group.exp(tau1, s1), group.exp(tau2, s2));
    C7 = group.mul(group.mul(group.exp(tau1b, s1), group.exp(tau2b, s2)), group.exp(wG2, group.neg(t)));
    E1 = group.exp(group.mul(group.mul(group.exp(uG2, idUShash2), group.exp(wG2, tagUSc)), hG2), t);
    E2 = group.exp(gG2, t);
    ct.insert(0, C0);
    ct.insert(1, C1);
    ct.insert(2, C2);
    ct.insert(3, C3);
    ct.insert(4, C4);
    ct.insert(5, C5);
    ct.insert(6, C6);
    ct.insert(7, C7);
    ct.insert(8, E1);
    ct.insert(9, E2);
    ct.insert(10, tagUSc);
    return;
}

void Dsewaters09::decrypt(CharmList & ct, CharmList & sk, GT & M)
{
    string id;
    G1 D1;
    G1 D2;
    G1 D3;
    G1 D4;
    G1 D5;
    G1 D6;
    G1 D7;
    G1 K;
    ZR tagUSk;
    GT C0;
    G2 C1;
    G2 C2;
    G2 C3;
    G2 C4;
    G2 C5;
    G2 C6;
    G2 C7;
    G2 E1;
    G2 E2;
    ZR tagUSc;
    ZR tag = group.init(ZR_t);
    GT A1 = group.init(GT_t);
    GT A2 = group.init(GT_t);
    GT A3 = group.init(GT_t);
    GT A4 = group.init(GT_t);
    GT result0 = group.init(GT_t);
    GT result1 = group.init(GT_t);
    
    id = sk[0].strPtr;
    D1 = sk[1].getG1();
    D2 = sk[2].getG1();
    D3 = sk[3].getG1();
    D4 = sk[4].getG1();
    D5 = sk[5].getG1();
    D6 = sk[6].getG1();
    D7 = sk[7].getG1();
    K = sk[8].getG1();
    tagUSk = sk[9].getZR();
    
    C0 = ct[0].getGT();
    C1 = ct[1].getG2();
    C2 = ct[2].getG2();
    C3 = ct[3].getG2();
    C4 = ct[4].getG2();
    C5 = ct[5].getG2();
    C6 = ct[6].getG2();
    C7 = ct[7].getG2();
    E1 = ct[8].getG2();
    E2 = ct[9].getG2();
    tagUSc = ct[10].getZR();
    tag = group.exp(group.sub(tagUSc, tagUSk), -1);
    A1 = group.mul(group.pair(C1, D1), group.mul(group.pair(C2, D2), group.mul(group.pair(C3, D3), group.mul(group.pair(C4, D4), group.pair(C5, D5)))));
    A2 = group.mul(group.pair(C6, D6), group.pair(C7, D7));
    A3 = group.div(A1, A2);
    A4 = group.div(group.pair(E1, D7), group.pair(E2, K));
    result0 = group.exp(A4, tag);
    result1 = group.div(A3, result0);
    M = group.div(C0, result1);
    return;
}

