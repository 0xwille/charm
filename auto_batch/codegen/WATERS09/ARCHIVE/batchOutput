Final batch eq: (e(pk#2?,(prod{z := 0,N} on sig1_z^(s_z * delta_z))) * (e(pk#5?,(prod{z := 0,N} on sig2_z^(s1_z * delta_z))) * (e(pk#3?,(prod{z := 0,N} on sig3_z^(s1_z * delta_z))) * (e(pk#6?,(prod{z := 0,N} on sig4_z^(s2_z * delta_z))) * e(pk#4?,(prod{z := 0,N} on sig5_z^(s2_z * delta_z))))))) == (e((pk#7? * pk#8?),(prod{z := 0,N} on sig6_z^(s1_z * (s2_z * delta_z)))) * (e(((pk#9? * (pk#10? * pk#11?)) * ((pk#14? * pk#11?) * pk#12?)),(prod{z := 0,N} on sig7_z^(s1_z * (delta_z * (s2_z * (-t_z * (M_z * (tagc_z * (t_z * theta_z))))))))) * (e(pk#    g1,(prod{z := 0,N} on sigK_z^(t_z * (-theta_z * -delta_z)))) * A^sum{z := 0,N} of (s2_z * delta_z))))
<====	PREP FOR CODE GEN	====>

Final version => (e(gb,dotA) * (e(gba1,dotB) * (e(ga1,dotC) * (e(gba2,dotD) * e(ga2,dotE))))) == (e((tau1 * tau2),dotF) * (e(((tau1b * (tau2b * w)) * ((u * w) * h)),dotG) * (e(g1,dotH) * A^sumI))) 

Compute:  dotA := (prod{z := 0,N} on sig1_z^(s_z * delta_z))
Compute:  dotB := (prod{z := 0,N} on sig2_z^(s1_z * delta_z))
Compute:  dotC := (prod{z := 0,N} on sig3_z^(s1_z * delta_z))
Compute:  dotD := (prod{z := 0,N} on sig4_z^(s2_z * delta_z))
Compute:  dotE := (prod{z := 0,N} on sig5_z^(s2_z * delta_z))
Compute:  dotF := (prod{z := 0,N} on sig6_z^(s1_z * (s2_z * delta_z)))
Compute:  dotG := (prod{z := 0,N} on sig7_z^(s1_z * (delta_z * (s2_z * (-t_z * (M_z * (tagc_z * (t_z * theta_z))))))))
Compute:  dotH := (prod{z := 0,N} on sigK_z^(t_z * (-theta_z * -delta_z)))
Compute:  sumI := sum{z := 0,N} of (s2_z * delta_z)
Precompute: s1 := random(ZR)
Precompute: theta_z := (tagc - tagk)^-1
Precompute: s := (s1 + s2)
Precompute: s2 := random(ZR)
Precompute: delta := for{z := 1, N} do prng_z
Precompute: t := random(ZR)
Precompute: tagc := random(ZR)
dotA := G2
dotB := G2
dotC := G2
dotD := G2
dotE := G2
dotF := G2
dotG := G2
dotH := G2
sumI := None
