['cyh.bv']
types  => {'g2': 'G2', 'sk': 'G1', 'S': 'G1', 'r': 'ZR', 'u': 'G1', 'pk': 'G1'}
constant  => ['P', 'g2']
variables => {'g2': 'G2', 'l': '20', 'N': '100', 'sk': 'G1', 'S': 'G1', 'r': 'ZR', 'u': 'G1', 'pk': 'G1'}
batch algorithm => ['2', '3']

VERIFY EQUATION => verify := e((prod{i := 1,l} on (u_i * pk_i^h_i)),P) == e(S,g2)

Stage A: Combined Equation => verify := (prod{j := 1,N} on e((prod{i := 1,l} on (u_i,j * pk_i,j^h_i,j)),P)) == (prod{j := 1,N} on e(S_j,g2))

Stage B: Small Exp Test => verify := (prod{j := 1,N} on e((prod{i := 1,l} on (u_i,j * pk_i,j^h_i,j)),P)^delta_j) == (prod{j := 1,N} on e(S_j,g2)^delta_j) 

Rule 2: Left := Move 'delta_j' exponent into the pairing. Left := Move 'delta_j' exponent into the pairing.  

Applying technique 2 => : verify := (prod{j := 1,N} on e((prod{i := 1,l} on (u_i,j * pk_i,j^h_i,j))^delta_j,P)) == (prod{j := 1,N} on e(S_j^delta_j,g2)) 

Rule 3: common 1st (left) node appears, so can reduce n pairings to 1. common 1st (left) node appears, so can reduce n pairings to 1.  

Applying technique 3 => : verify := e((prod{j := 1,N} on (prod{i := 1,l} on (u_i,j * pk_i,j^h_i,j))^delta_j),P) == e((prod{j := 1,N} on S_j^delta_j),g2) 

Instances found => {'pk_i,j': {'h_i,j': 1}, 'S_j': {'delta_j': 1}} 

Final batch eq: e((prod{j := 1,N} on (prod{i := 1,l} on (uverify_ij * pkverify_ij^hverify_ij))^delta_j),P) == e((prod{j := 1,N} on Sverify_j^delta_j),g2)
Dot prod => {'start': '1', 'list': [<batchlang.BinaryNode object at 0x103a0f0d0>, <batchlang.BinaryNode object at 0x103a0f4d0>, <batchlang.BinaryNode object at 0x103a0fb50>], 'stop': 'N', 'dict': {<batchlang.BinaryNode object at 0x103a0fb50>: <batchlang.BinaryNode object at 0x103a03210>, <batchlang.BinaryNode object at 0x103a0f0d0>: <batchlang.BinaryNode object at 0x1039ca550>, <batchlang.BinaryNode object at 0x103a0f4d0>: <batchlang.BinaryNode object at 0x1039f4850>}, 'index': 'j'}
<====	PREP FOR CODE GEN	====>

Final version => e(dotB,P) == e(dotC,g2) 

Compute:  dotA := (prod{i := 1,l} on (uverify_ij * pkverify_ij^hverify_ij))
Compute:  dotB := (prod{j := 1,N} on dotA^delta_j)
Compute:  dotC := (prod{j := 1,N} on Sverify_j^delta_j)
Precompute: h := H(M | L | u,ZR)
Precompute: S := sk^(h + r)
Precompute: delta := for{j := 1, N} do prng_j
