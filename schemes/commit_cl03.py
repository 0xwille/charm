from toolbox.Commit import *
from charm.integer import *

def randomQR(n):
    return random(n) ** 2

debug = False
class CM_CL03(Commitment):
    def __init__(self):
        Commitment.__init__(self)

    def setup(self, ln=1024, p=None, q=None):
        secparam = int(ln/2)

        if(not(p and q)):
            pprime = randomPrime(secparam)
            while(not isPrime(2*pprime + 1)):
                pprime = randomPrime(secparam)
            p = 2 * pprime + 1

            qprime = randomPrime(secparam)
            while(not isPrime(2*qprime + 1)):
                qprime = randomPrime(secparam)
            q = 2 * qprime + 1

        N = p * q

        h = randomQR(N)
        g = randomQR(N) #in group generated by h?

        pk = { 'N':N, 'h':h, 'g':g }

        return pk

    def commit(self, pk, x, r):
        c = ((pk['g'] ** x) * (pk['h'] ** r)) % pk['N']

        return c

    def decommit(self, pk, c, r, x):
        return c == (pk['g'] ** x) * (pk['h'] ** r)

def main():
    cm = CM_CL03()
   
    pk = cm.setup()
    if debug: 
        print("Public parameters...")
        print("pk =>", pk)
    
    m = integer(randomBits(160))
    r = integer(randomBits(1024)) % pk['N']
    if debug: print("Commiting to => ", m, r)
    c = cm.commit(pk, m, r)
    
    assert cm.decommit(pk, c, r, m), "FAILED to decommit"
    if debug: print("Successful and Verified decommitment!!!")
      
if __name__ == "__main__":
    debug = True
    main()

